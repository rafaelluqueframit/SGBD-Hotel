package ddsi.ademat;

import java.sql.*;
import java.util.Scanner;

public class Facturacion {
    public static void crearTablas(Connection conn) {
        // Creación de la tabla Factura
        try {
            Statement stmt = conn.createStatement();
            GestionHotel.borrarTabla(conn, "Factura");
            stmt.executeUpdate("CREATE TABLE Factura ("
                    + "id NUMBER GENERATED BY DEFAULT AS IDENTITY,"
                    + "concepto VARCHAR2(255) NOT NULL,"
                    + "fecha DATE NOT NULL,"
                    + "reembolsada NUMBER(1) DEFAULT 0,"
                    + "codReserva NUMBER NOT NULL,"
                    + "PRIMARY KEY (id),"
                    // FIX: Asegurar que primero se crea la tabla de Reserva
                    + "FOREIGN KEY (codReserva) REFERENCES Reserva(id)"
                    + ")");
            stmt.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
        try {
            Statement stmt = conn.createStatement();
            String triggerSQL = "CREATE OR REPLACE TRIGGER validar_reembolso "
                    + "BEFORE UPDATE ON Factura "
                    + "FOR EACH ROW "
                    + "BEGIN "
                    + "IF :OLD.reembolsada = 1 THEN "
                    + "RAISE_APPLICATION_ERROR(-20301, 'La factura ya ha sido reembolsada.'); "
                    + "END IF; "
                    + "END; ";

            stmt.execute(triggerSQL);
            System.out.println("Disparador 'validar_reembolso' creado o reemplazado correctamente.");
            stmt.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public static void mostrarTablas(Connection conn) {
        try {
            System.out.println("Contenido de Factura:");
            GestionHotel.mostrarTabla(conn, "Factura");
        } catch (SQLException e) {
            System.out.println("Error al mostrar las tablas: " + e.getMessage());
        }
    }

    public static void bucleInteractivo(Connection conn) {
        boolean terminar = false;
        Scanner scanner = new Scanner(System.in);

        // Hacer savepoints para poder descartar cambios
        Savepoint sp = null;
        try {
            sp = conn.setSavepoint();
        } catch (SQLException e) {
            System.out.println("Error al crear el savepoint: " + e.getMessage());
        }

        while (!terminar) {
            System.out.println("\n--- Menú de Facturación ---");
            System.out.println("1. Añadir método de pago");
            System.out.println("2. Eliminar método de pago");
            System.out.println("3. Generar factura");
            System.out.println("4. Consultar factura");
            System.out.println("5. Reembolsar factura");
            System.out.println("6. Descartar cambios");
            System.out.println("0. Guardar y salir");

            System.out.print("Elige una opción: ");
            int choice = scanner.nextInt();

            switch (choice) {
                case 1:
                    añadirMetodoPago(conn);
                    break;
                case 2:
                    eliminarMetodoPago(conn);
                    break;
                case 3:
                    generarFactura(conn);
                    break;
                case 4:
                    consultarFactura(conn);
                    break;
                case 5:
                    reembolsarFactura(conn);
                    break;
                case 6:
                    try {
                        conn.rollback(sp);
                        GestionHotel.mostrarTabla(conn, "Factura");
                        GestionHotel.mostrarTabla(conn, "Cliente");
                    } catch (SQLException e) {
                        System.out.println("Error al descartar los cambios: " + e.getMessage());
                    }
                    System.out.println("Cambios descartados.");
                    break;
                case 0:
                    try {
                        conn.commit();
                    } catch (SQLException e) {
                        System.out.println("Error al guardar los cambios: " + e.getMessage());
                    }
                    terminar = true;
                    System.out.println("Saliendo del subsistema de Facturación...");
                    break;
                default:
                    System.out.println("Opción inválida.");
            }
        }
    }

    public static void añadirMetodoPago(Connection conn) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("\nIndique el DNI del cliente: ");
        String dni = scanner.nextLine();
        try (PreparedStatement pstmt = conn.prepareStatement("SELECT * FROM Cliente WHERE dni = ?")) {
            pstmt.setString(1, dni);
            try (ResultSet rs = pstmt.executeQuery()) {
                if (!rs.next()) {
                    System.out.println("El cliente no existe.");
                    return;
                } else if (rs.getString("tarjeta") != null) {
                    System.out.println("El cliente ya tiene un método de pago asociado.");
                    return;
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }

        System.out.print("\nIndique el número de la tarjeta: ");
        String numTarjeta = scanner.nextLine();

        try {
            Statement stmt = conn.createStatement();
            stmt.executeUpdate("UPDATE Cliente SET tarjeta = '" + numTarjeta + "' WHERE dni = '" + dni + "'");
            System.out.println("Método de pago añadido con éxito.");
            GestionHotel.mostrarTabla(conn, "Cliente");
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public static void eliminarMetodoPago(Connection conn) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("\nIndique el DNI del cliente: ");
        String dni = scanner.nextLine();

        try {
            Statement stmt = conn.createStatement();
            stmt.executeQuery("SELECT * FROM Cliente WHERE dni = '" + dni + "'");
            ResultSet rs = stmt.getResultSet();
            if (!rs.next()) {
                System.out.println("El cliente no existe.");
                return;
            } else if (rs.getString("tarjeta") == null) {
                System.out.println("El cliente no tiene un método de pago asociado.");
                return;
            }
            stmt.executeUpdate("UPDATE Cliente SET tarjeta = NULL WHERE dni = '" + dni + "'");
            System.out.println("Método de pago eliminado con éxito.");
            GestionHotel.mostrarTabla(conn, "Cliente");
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public static void generarFactura(Connection conn) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("\nIndique el código de la reserva: ");
        String codReserva = scanner.nextLine();

        try {
            Statement stmt = conn.createStatement();
            stmt.executeQuery("SELECT * FROM Reserva WHERE id = '" + codReserva + "'");
            ResultSet rs = stmt.getResultSet();
            if (!rs.next()) {
                System.out.println("La reserva no existe.");
                return;
            } else {
                // Comprobar que el cliente tiene un método de pago asociado
                stmt.executeQuery("SELECT * FROM Cliente WHERE dni = '" + rs.getString("dni") + "'");
                ResultSet rsCliente = stmt.getResultSet();
                if (!rsCliente.next()) {
                    System.out.println("El cliente no existe.");
                    return;
                } else if (rsCliente.getString("tarjeta") == null) {
                    System.out.println("El cliente no tiene un método de pago asociado.");
                    return;
                }
            }
            System.out.print("\nIndique el concepto de la reserva: ");
            String concepto = scanner.nextLine();
            if (concepto.isEmpty()) {
                System.out.println("El concepto no puede estar vacío.");
                return;
            }
            String sql = "INSERT INTO Factura (concepto, fecha, codReserva) VALUES (?, SYSDATE, ?)";
            try (PreparedStatement pstmt = conn.prepareStatement(sql, new String[] { "id" })) {
                pstmt.setString(1, concepto);
                pstmt.setString(2, codReserva);

                pstmt.executeUpdate();

                try (ResultSet rs2 = pstmt.getGeneratedKeys()) {
                    if (rs2.next()) {
                        int idGenerado = rs2.getInt(1); // Recupera la clave generada
                        System.out.println("Factura generada con identificador " + idGenerado);
                        GestionHotel.mostrarTabla(conn, "Factura");
                    } else {
                        System.out.println("No se generó ninguna clave.");
                    }
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public static void consultarFactura(Connection conn) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("\nIndique el identificador de la factura: ");
        String codFactura = scanner.nextLine();

        try {
            Statement stmt = conn.createStatement();
            stmt.executeQuery("SELECT * FROM Factura WHERE id = '" + codFactura + "'");
            ResultSet rs = stmt.getResultSet();
            if (!rs.next()) {
                System.out.println("La factura no existe.");
                return;
            } else {
                System.out.println("Identificador: " + rs.getString("id"));
                System.out.println("Concepto: " + rs.getString("concepto"));
                System.out.println("Fecha: " + rs.getString("fecha"));
                System.out.println("Reembolsada: " + rs.getBoolean("reembolsada"));
                System.out.println("Código de reserva: " + rs.getString("codReserva"));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public static void reembolsarFactura(Connection conn) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("\nIndique el identificador de la factura: ");
        String codFactura = scanner.nextLine();

        try {
            Statement stmt = conn.createStatement();
            stmt.executeQuery("SELECT * FROM Factura WHERE id = '" + codFactura + "'");
            ResultSet rs = stmt.getResultSet();
            if (!rs.next()) {
                System.out.println("La factura no existe.");
                return;
            }
            // else if (rs.getBoolean("reembolsada")) {
            // System.out.println("La factura ya ha sido reembolsada.");
            // return;
            // }
            stmt.executeUpdate("UPDATE Factura SET reembolsada = 1 WHERE id = '" + codFactura + "'");
            System.out.println("Factura reembolsada con éxito.");
            GestionHotel.mostrarTabla(conn, "Factura");
        } catch (SQLException e) {
            System.out.println("Error al reembolsar: la factura ya ha sido reembolsada\n" + e.getMessage());
        }
    }
}